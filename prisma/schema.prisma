// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  locations Location[]
  preferences Preference?
  alerts    Alert[]
}

model Location {
  id        String   @id @default(cuid())
  city      String?
  country   String?
  latitude  Float
  longitude Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  alerts    Alert[]
  WeatherCache WeatherCache[]
}

model Preference {
  id               String   @id @default(cuid())
  tempUnit         String   @default("C") // Celsius or Fahrenheit
  windUnit         String   @default("kmh")    // km/h or mph
  notifyChannel    String   @default("email")   // email or sms
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Alert {
  id          String   @id @default(cuid())
  type        String   // e.g., "rain", "snow", "temperature"
  condition   String
  isActive    Boolean  @default(true)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  location    Location @relation(fields: [locationId], references: [id])
  locationId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WeatherCache {
  id          String   @id @default(cuid())
  location    Location @relation(fields: [locationId], references: [id])
  locationId  String   @unique
  type       String
  data        Json
  fetchedAt   DateTime @default(now())
}